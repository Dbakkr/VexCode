#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.



// generating and setting random seed
void initializeRandomSeed(){
  int systemTime = Brain.Timer.systemHighResolution();
  double batteryCurrent = Brain.Battery.current();
  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);

  // Combine these values into a single integer
  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;

  // Set the seed
  srand(seed);
}



void vexcodeInit() {

  //Initializing random seed.
  initializeRandomSeed(); 
}


// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}

#pragma endregion VEXcode Generated Robot Configuration
#include "main.h"
// #include "robot-config.h"

#include "pros/apix.h"  
using namespace pros;

pros::Controller master(pros::E_CONTROLLER_MASTER);
pros::Motor leftDriveMotor1(18); 
pros::Motor leftDriveMotor2(19); 
pros::Motor leftDriveMotor3(20); 
pros::Motor rightDriveMotor1(8);
pros::Motor rightDriveMotor2(9);
pros::Motor rightDriveMotor3(10);

void initialize() {
    leftDriveMotor1.set_reversed(true);
    leftDriveMotor2.set_reversed(true);
    leftDriveMotor3.set_reversed(true);
}

void disabled() {
    // Code for when the robot is disabled
}

void competition_initialize() {
  competition Competition;
  
}

void autonomous() {
 
  Brain.Screen.print("Running autonomous");


}

void opcontrol() {
    while (true) {
        // Retrieve joystick values from the controller
        int forward = master.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
        int turn = master.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_X);

        // Calculate the motor speeds based on joystick inputs
        int leftMotorSpeed = forward + turn;
        int rightMotorSpeed = forward - turn;

        // Set the motors to run at calculated speeds
        leftDriveMotor1.move(leftMotorSpeed);
        leftDriveMotor2.move(leftMotorSpeed);
        leftDriveMotor3.move(leftMotorSpeed);
        rightDriveMotor1.move(rightMotorSpeed);
        rightDriveMotor2.move(rightMotorSpeed);
        rightDriveMotor3.move(rightMotorSpeed);

        // Wait for a short time to prevent wasting CPU cycles
        pros::delay(20);
    }
}

